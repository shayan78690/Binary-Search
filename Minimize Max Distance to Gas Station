public class Solution {
    public static double MinimiseMaxDistance(int []arr, int K){
         int n = arr.length;
        double left = 0, right = arr[n - 1] - arr[0];
        double result = right;

        while (right - left > 1e-6) { // Precision threshold
            double mid = left + (right - left) / 2;

            if (canPlaceStations(arr, K, mid)) {
                result = mid;
                right = mid; // Try smaller max distance
            } else {
                left = mid; // Increase max distance
            }
        }

        return result;
    }
    private static boolean canPlaceStations(int[] arr, int K, double maxDist) {
        int requiredStations = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            double gap = arr[i + 1] - arr[i];
            requiredStations += Math.ceil(gap / maxDist) - 1; // Stations needed in this gap
        }

        return requiredStations <= K;
    }
}
